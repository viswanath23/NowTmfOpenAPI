<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_24823_tm.WsCommonUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>This script includes holds the list of common functions used across the various APIs</description>
        <name>WsCommonUtils</name>
        <script><![CDATA[var WsCommonUtils = (function() {

    return {
        "recordInserted": recordInserted,
        "recordUpdated": recordUpdated,
        "recordDeleted": recordDeleted,
        "isValidEvent": isValidEvent

    };

    function recordInserted(logobj, responseObj, args) {
        try {
            var headers = "";
            var contentType = "";
            var location = "";
            var status = "201";
            var body = {};
            body.message = args.resource + " is successfully created";

            new x_24823_tm.InboundWsLogUtils().updateInbLog(logObj, JSON.stringify(body), "2", "201");
            return responseBuilder(responseObj, status, body, headers, contentType, location);
        } catch (err) {
            gs.error("WsCommonUtils::recordInserted >> Error occured \n " + err.toString());
            new x_24823_tm.InboundWsLogUtils().updateInbLog(logObj, "Servicenow technical Error", "3", "500");
            return WsErrorUtils.TechnicalError(err.toString());
        }
    }

    function recordUpdated(logobj, responseObj, args) {
        try {

            var headers = "";
            var contentType = "";
            var location = "";
            var status = "200";
            var body = {};
            body.message = args.resource + " is successfully updated";

            new x_24823_tm.InboundWsLogUtils().updateInbLog(logObj, JSON.stringify(body), "2", "201");
            return responseBuilder(responseObj, status, body, headers, contentType, location);
        } catch (err) {
            gs.error("WsCommonUtils::responseBuilder >> Error occured \n " + err.toString());
            new x_24823_tm.InboundWsLogUtils().updateInbLog(logObj, "Servicenow technical Error", "3", "500");
            return WsErrorUtils.TechnicalError(err.toString());
        }

    }

    function recordDeleted(logobj, responseObj, args) {
        try {

            var headers = "";
            var contentType = "";
            var location = "";
            var status = "201";
            var body = {};
            body.message = args.resource + " is successfully deleted";

            new x_24823_tm.InboundWsLogUtils().updateInbLog(logObj, JSON.stringify(body), "2", "201");
            return responseBuilder(responseObj, status, body, headers, contentType, location);
        } catch (err) {
            gs.error("WsCommonUtils::recordDeleted >> Error occured \n " + err.toString());
            new x_24823_tm.InboundWsLogUtils().updateInbLog(logObj, "Servicenow technical Error", "3", "500");
            return WsErrorUtils.TechnicalError(err.toString());
        }

    }

    function responseBuilder(responseObj, status, responseBody, headers, contentType, location) {
        try {

            responseObj.setStatus((status) ? status : "200");
            responseObj.setBody((responseBody) ? responseBody : "Message received");
            if (!gs.nil(headers)) {
                responseObj.setHeaders(headers);
            }
            if (!gs.nil(location)) {
                responseObj.setLocation(location);
            }
            if (!gs.nil(contentType)) {
                responseObj.setContentType(contentType);
            }
            return responseObj;

        } catch (err) {
            gs.error("WsCommonUtils::responseBuilder >> Error occured \n " + err.toString());
            return WsErrorUtils.TechnicalError(err.toString());
        }
    }

    function isValidEvent(eventname, resourceendpoint) { // resourceendpoint is sys_id
        try {
            var ev = new GlideRecord('x_24823_tm_tmf_event');
            ev.addQuery('tmf_event_name', eventname);
            ev.addQuery('resource_api_endpoints', 'contains', resourceendpoint);
			ev.setLimit(1);
            ev.query();           

            return ev.hasNext();

        } catch (err) {
            gs.error("WsCommonUtils::EventValidation >> Error Occured \n " + err.toString());
			return WsErrorUtils.TechnicalError(err.toString());
        }
    }






})();]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>viswanath23@gmail.com</sys_created_by>
        <sys_created_on>2020-06-12 12:56:20</sys_created_on>
        <sys_id>097e69e6db555410357d29e1ca961913</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>WsCommonUtils</sys_name>
        <sys_package display_value="TMF catalyst" source="x_24823_tm">f770b6d1db185050357d29e1ca96196f</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="TMF catalyst">f770b6d1db185050357d29e1ca96196f</sys_scope>
        <sys_update_name>sys_script_include_097e69e6db555410357d29e1ca961913</sys_update_name>
        <sys_updated_by>viswanath23@gmail.com</sys_updated_by>
        <sys_updated_on>2020-07-06 17:38:34</sys_updated_on>
    </sys_script_include>
</record_update>
